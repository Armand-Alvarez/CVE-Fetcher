#!/usr/bin/env python3

'''
CVE-Fetcher.py
Fetch top CVE's & descriptions from cvetrends.com
Author: Armand Alvarez
github: github.com/Armand-Alvarez/CVE-Fetcher
'''
try:
    import urllib3
except ImportError as err: 
    print("[!] Must install urllib3.\n" + err)
    exit()

try:
    import json
except ImportError as err: 
    print("[!] Must install json.\n" + err)
    exit()



# Control variables
website = 'cvstrends.com'
d1url = 'https://cvetrends.com/api/cves/24hrs' # Website we are pulling from
d7url = 'https://cvetrends.com/api/cves/7days'
timeout=4.0 # Seconds before we timeout the request
retries=False # Whether or not we want to retry a failed connection

# The different fields we want to grab from the response data:
fields = {
    'cve': 'CVE Number',
    'publishedDate': 'Date Published',
    'cvssv3_base_score': 'CVSS v3 Score',
    'cvssv3_base_severity': 'CVSS v3 Severity',
    'epss_score': 'EPSS Score',
    'description': 'Description',
    'num_tweets_and_retweets': 'Num of Tweets & Retweets',
    'vendor_advisories': 'Vendor Advisories',
}

# Get the max length of fields values for formatting reasons
max_len = max(len(l) for l in fields.values()) + 4


def main():

    # Print logo
    printLogo()

    # Set up the PoolManager for urllib3
    http = urllib3.PoolManager()

    r1, r7 = requestHttpData(http)

    y=json.loads(r1.data.decode('utf-8')) # Translate to json
    print("-------------------------------------------\n[-] Past 24 Hours Top Ranked CVE's\n")
    printCVSSInformation(y)

    y=json.loads(r7.data.decode('utf-8')) # Translate to json
    print("-------------------------------------------\n[-] Top-7 Day Ranked CVE's\n")
    printCVSSInformation(y)


# Print information for each of the CVSS's
def printCVSSInformation(y):
    for cvss in y.get('data'): 
        for field in fields:
            if(cvss[field]):  # If the field has data in it
                if field == 'vendor_advisories': print('{}{}'.format(str(fields[field]).ljust(max_len + 1), ', '.join(cvss[field])))
                    
                else:
                    print('{}{}'.format(str(fields[field]).ljust(max_len + 1), str(cvss[field])))
                    #print(str(fields[field]) + ":\t" + str(cvss[field]))
            else: 
                if field == 'description': print('{}{}'.format(str(fields[field]).ljust(max_len + 1), 'Pending'))
        print("\n")


def requestHttpData(http):
    # Make the http request to cvetrends
    print("[-] Attempting connection to " + website + " ...")
    try:
        r1 = http.request('GET', d1url, retries=retries, timeout=timeout)
    except urllib3.exceptions.NewConnectionError as err:
        print('[!] Couldn\'t connect to ' + d1url)
        print('[!] Error:')
        print(err)
        exit()
    try:
        r7 = http.request('GET', d7url, retries=retries, timeout=timeout)
    except urllib3.exceptions.NewConnectionError as err:
        print('[!] Couldn\'t connect to ' + d7url)
        print('[!] Error:')
        print(err)
        exit()
    
    # Continue if response code 200 (success) or 302 (transfer)
    if (r1.status != 200 and r1.satus != 302 and r7.status != 200 and r7.status != 302):
        print("[!] Failure. Status codes: ")
        print(d1url + " " + str(r1.status))
        print(d7url + " " + str(r7.status))
        exit()
    else: print("[-] Success!\n\n")

    return r1, r7



def printLogo():

    # Print the logo
    print("\n\n\n")
    print("""
   ______     _______      _____    _       _               
  / ___\ \   / / ____|    |  ___|__| |_ ___| |__   ___ _ __ 
 | |    \ \ / /|  _| _____| |_ / _ \ __/ __| '_ \ / _ \ '__|
 | |___  \ V / | |__|_____|  _|  __/ || (__| | | |  __/ |   
  \____|  \_/  |_____|    |_|  \___|\__\___|_| |_|\___|_|   
                                                            
    """)
    print("By: Armand Alvarez")
    print("github.com/Armand-Alvarez")
    print("\n\n\n")
    


if __name__ == "__main__":
    main()

